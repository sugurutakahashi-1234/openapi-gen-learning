// This file is auto-generated by @hey-api/openapi-ts

export type User = {
    /**
     * Unique identifier for the user
     */
    id: string;
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's role in the system
     */
    role: 'admin' | 'user' | 'guest';
    /**
     * Timestamp when the user was created
     */
    createdAt: string;
    /**
     * Timestamp when the user was last updated
     */
    updatedAt?: string;
    /**
     * Whether the user account is active
     */
    isActive: boolean;
    /**
     * URL to the user's avatar image
     */
    avatarUrl?: string;
    /**
     * Additional user metadata
     */
    metadata?: {
        [key: string]: string;
    };
};

export type CreateUserRequest = {
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's role in the system
     */
    role?: 'admin' | 'user' | 'guest';
    /**
     * Additional user metadata
     */
    metadata?: {
        [key: string]: string;
    };
};

export type UpdateUserRequest = {
    /**
     * User's full name
     */
    name?: string;
    /**
     * User's role in the system
     */
    role?: 'admin' | 'user' | 'guest';
    /**
     * Whether the user account is active
     */
    isActive?: boolean;
    /**
     * Additional user metadata
     */
    metadata?: {
        [key: string]: string;
    };
};

export type UsersListResponse = {
    /**
     * List of users
     */
    users: Array<User>;
    pagination: Pagination;
};

export type Pagination = {
    /**
     * Current page number
     */
    page: number;
    /**
     * Number of items per page
     */
    limit: number;
    /**
     * Total number of items
     */
    total: number;
    /**
     * Total number of pages
     */
    totalPages: number;
};

export type AvatarUploadResponse = {
    /**
     * URL to the uploaded avatar
     */
    avatarUrl: string;
    /**
     * Success message
     */
    message: string;
};

export type ValidationError = {
    /**
     * Error type identifier
     */
    error: 'validation_error';
    /**
     * Human-readable error message
     */
    message: string;
    /**
     * HTTP status code
     */
    code: 400;
    /**
     * Detailed validation errors
     */
    details?: {
        issues: Array<{
            /**
             * Path to the invalid field
             */
            path: Array<string>;
            /**
             * Validation error message
             */
            message: string;
            /**
             * Error code
             */
            code: string;
        }>;
    };
};

export type NotFoundError = {
    /**
     * Error type identifier
     */
    error: 'not_found';
    /**
     * Human-readable error message
     */
    message: string;
    /**
     * HTTP status code
     */
    code: 404;
};

export type ConflictError = {
    /**
     * Error type identifier
     */
    error: 'conflict';
    /**
     * Human-readable error message
     */
    message: string;
    /**
     * HTTP status code
     */
    code: 409;
};

export type FileTooLargeError = {
    /**
     * Error type identifier
     */
    error: 'file_too_large';
    /**
     * Human-readable error message
     */
    message: string;
    /**
     * HTTP status code
     */
    code: 413;
};

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number for pagination
         */
        page?: number;
        /**
         * Number of items per page (max 100)
         */
        limit?: number;
        /**
         * Filter by user role
         */
        role?: 'admin' | 'user' | 'guest';
        /**
         * Filter by user active status
         */
        isActive?: boolean;
    };
    url: '/users';
};

export type ListUsersErrors = {
    /**
     * Invalid query parameters
     */
    400: ValidationError;
};

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors];

export type ListUsersResponses = {
    /**
     * List of users retrieved successfully
     */
    200: UsersListResponse;
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type CreateUserData = {
    body: CreateUserRequest;
    path?: never;
    query?: never;
    url: '/users';
};

export type CreateUserErrors = {
    /**
     * Invalid user data
     */
    400: ValidationError;
    /**
     * User with email already exists
     */
    409: ConflictError;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * User created successfully
     */
    201: User;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        /**
         * The unique identifier of the user
         */
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type DeleteUserErrors = {
    /**
     * Invalid user ID format
     */
    400: ValidationError;
    /**
     * User not found
     */
    404: NotFoundError;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * User deleted successfully
     */
    204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserByIdData = {
    body?: never;
    path: {
        /**
         * The unique identifier of the user
         */
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type GetUserByIdErrors = {
    /**
     * Invalid user ID format
     */
    400: ValidationError;
    /**
     * User not found
     */
    404: NotFoundError;
};

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors];

export type GetUserByIdResponses = {
    /**
     * User found and returned successfully
     */
    200: User;
};

export type GetUserByIdResponse = GetUserByIdResponses[keyof GetUserByIdResponses];

export type UpdateUserData = {
    body: UpdateUserRequest;
    path: {
        /**
         * The unique identifier of the user
         */
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UpdateUserErrors = {
    /**
     * Invalid user ID or data
     */
    400: ValidationError;
    /**
     * User not found
     */
    404: NotFoundError;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
    /**
     * User updated successfully
     */
    200: User;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type UploadUserAvatarData = {
    body: {
        /**
         * Avatar image file
         */
        avatar: Blob | File;
    };
    path: {
        /**
         * The unique identifier of the user
         */
        id: string;
    };
    query?: never;
    url: '/users/{id}/avatar';
};

export type UploadUserAvatarErrors = {
    /**
     * Invalid file or user ID
     */
    400: ValidationError;
    /**
     * User not found
     */
    404: NotFoundError;
    /**
     * File too large
     */
    413: FileTooLargeError;
};

export type UploadUserAvatarError = UploadUserAvatarErrors[keyof UploadUserAvatarErrors];

export type UploadUserAvatarResponses = {
    /**
     * Avatar uploaded successfully
     */
    200: AvatarUploadResponse;
};

export type UploadUserAvatarResponse = UploadUserAvatarResponses[keyof UploadUserAvatarResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:3001' | (string & {});
};