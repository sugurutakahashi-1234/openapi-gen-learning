// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { ListUsersData, ListUsersResponses, ListUsersErrors, CreateUserData, CreateUserResponses, CreateUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, GetUserByIdData, GetUserByIdResponses, GetUserByIdErrors, UpdateUserData, UpdateUserResponses, UpdateUserErrors, UploadUserAvatarData, UploadUserAvatarResponses, UploadUserAvatarErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List all users
 * Retrieve a paginated list of users with optional filtering
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponses, ListUsersErrors, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * Create new user
 * Create a new user with the provided information
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete user
 * Delete a user by their unique identifier
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get user by ID
 * Retrieve a specific user by their unique identifier
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update user
 * Update an existing user with new information
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload user avatar
 * Upload an avatar image for a specific user
 */
export const uploadUserAvatar = <ThrowOnError extends boolean = false>(options: Options<UploadUserAvatarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadUserAvatarResponses, UploadUserAvatarErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/users/{id}/avatar',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};