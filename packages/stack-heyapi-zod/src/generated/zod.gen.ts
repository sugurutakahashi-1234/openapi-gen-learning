// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * ユーザー情報
 */
export const zUser = z.object({
    id: z.string(),
    name: z.string().min(1).max(100),
    email: z.string().email(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime()
});

/**
 * エラータイプ
 */
export const zApiErrorType = z.enum([
    'BadRequest',
    'ValidationFailed',
    'InvalidJson',
    'InvalidAgeRange',
    'Unauthorized',
    'Forbidden',
    'NotFound',
    'UserNotFound',
    'PostNotFound',
    'CommentNotFound',
    'TagNotFound',
    'Conflict',
    'EmailAlreadyExists',
    'TagAlreadyExists',
    'Unknown',
    'DatabaseError',
    'InternalServerError'
]);

/**
 * APIエラーレスポンス
 */
export const zErrorResponse = z.object({
    data: z.null(),
    status: z.enum([
        'error'
    ]),
    errorType: zApiErrorType,
    message: z.string(),
    description: z.string()
});

/**
 * ユーザー作成リクエスト
 */
export const zCreateUser = z.object({
    name: z.string().min(1).max(100),
    email: z.string().email()
});

/**
 * タグ情報
 */
export const zTag = z.object({
    id: z.string(),
    name: z.string().min(1).max(50),
    slug: z.string().regex(/^[a-z0-9]+(?:-[a-z0-9]+)*$/),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime()
});

/**
 * 投稿とタグの関連情報
 */
export const zPostTag = z.object({
    postId: z.string(),
    tagId: z.string(),
    tag: zTag,
    taggedAt: z.string().datetime()
});

/**
 * 投稿情報
 */
export const zPost = z.object({
    id: z.string(),
    title: z.string().min(1).max(200),
    content: z.string(),
    published: z.boolean(),
    userId: z.string(),
    tags: z.array(zPostTag),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime()
});

/**
 * 投稿作成リクエスト
 */
export const zCreatePost = z.object({
    title: z.string().min(1).max(200),
    content: z.string().min(1),
    published: z.boolean().optional().default(false),
    userId: z.string(),
    tagIds: z.array(z.string()).min(0).max(10).optional()
});

/**
 * 投稿更新リクエスト（PATCH）
 */
export const zUpdatePost = z.object({
    title: z.string().min(1).max(200).optional(),
    content: z.string().min(1).optional(),
    published: z.boolean().optional(),
    tagIds: z.array(z.string()).min(0).max(10).optional()
});

/**
 * タグ作成リクエスト
 */
export const zCreateTag = z.object({
    name: z.string().min(1).max(50),
    slug: z.string().regex(/^[a-z0-9]+(?:-[a-z0-9]+)*$/)
});

/**
 * コメント情報
 */
export const zComment = z.object({
    id: z.string(),
    content: z.string().min(1),
    postId: z.string(),
    user: z.object({
        id: z.string(),
        name: z.string().min(1).max(100),
        email: z.string().email()
    }),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime()
});

/**
 * コメント作成リクエスト
 */
export const zCreateComment = z.object({
    content: z.string().min(1),
    postId: z.string(),
    userId: z.string()
});

/**
 * コメント更新リクエスト
 */
export const zUpdateComment = z.object({
    content: z.string().min(1)
});

export const zGetUsersApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * ユーザー一覧
 */
export const zGetUsersApiResponse = z.object({
    data: z.array(zUser),
    status: z.enum([
        'success'
    ])
});

export const zPostUsersApiData = z.object({
    body: zCreateUser,
    headers: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * 作成されたユーザー
 */
export const zPostUsersApiResponse = z.object({
    data: zUser,
    status: z.enum([
        'success'
    ])
});

export const zDeleteUsersByIdApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * 削除成功
 */
export const zDeleteUsersByIdApiResponse = z.void();

export const zGetUsersByIdApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * ユーザー情報
 */
export const zGetUsersByIdApiResponse = z.object({
    data: zUser,
    status: z.enum([
        'success'
    ])
});

export const zGetPostsApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        page: z.string().optional().default('1'),
        limit: z.string().optional().default('10'),
        userId: z.string().optional(),
        published: z.string().optional()
    }).optional()
});

/**
 * 投稿一覧
 */
export const zGetPostsApiResponse = z.object({
    data: z.array(zPost),
    status: z.enum([
        'success'
    ])
});

export const zPostPostsApiData = z.object({
    body: zCreatePost,
    headers: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * 作成された投稿
 */
export const zPostPostsApiResponse = z.object({
    data: zPost,
    status: z.enum([
        'success'
    ])
});

export const zDeletePostsByIdApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * 削除成功
 */
export const zDeletePostsByIdApiResponse = z.void();

export const zGetPostsByIdApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * 投稿情報
 */
export const zGetPostsByIdApiResponse = z.object({
    data: zPost,
    status: z.enum([
        'success'
    ])
});

export const zPutPostsByIdApiData = z.object({
    body: zUpdatePost,
    headers: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * 更新された投稿
 */
export const zPutPostsByIdApiResponse = z.object({
    data: zPost,
    status: z.enum([
        'success'
    ])
});

export const zGetTagsApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * タグ一覧
 */
export const zGetTagsApiResponse = z.object({
    data: z.array(zTag),
    status: z.enum([
        'success'
    ])
});

export const zPostTagsApiData = z.object({
    body: zCreateTag,
    headers: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * 作成されたタグ
 */
export const zPostTagsApiResponse = z.object({
    data: zTag,
    status: z.enum([
        'success'
    ])
});

export const zDeleteTagsByIdApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * 削除成功
 */
export const zDeleteTagsByIdApiResponse = z.void();

export const zGetTagsByIdApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * タグ情報
 */
export const zGetTagsByIdApiResponse = z.object({
    data: zTag,
    status: z.enum([
        'success'
    ])
});

export const zGetCommentsApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        postId: z.string()
    })
});

/**
 * コメント一覧
 */
export const zGetCommentsApiResponse = z.object({
    data: z.array(zComment),
    status: z.enum([
        'success'
    ])
});

export const zPostCommentsApiData = z.object({
    body: zCreateComment,
    headers: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * 作成されたコメント
 */
export const zPostCommentsApiResponse = z.object({
    data: zComment,
    status: z.enum([
        'success'
    ])
});

export const zDeleteCommentsByIdApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * 削除成功
 */
export const zDeleteCommentsByIdApiResponse = z.void();

export const zGetCommentsByIdApiData = z.object({
    body: z.never().optional(),
    headers: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * コメント情報
 */
export const zGetCommentsByIdApiResponse = z.object({
    data: zComment,
    status: z.enum([
        'success'
    ])
});

export const zPutCommentsByIdApiData = z.object({
    body: zUpdateComment,
    headers: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * 更新されたコメント
 */
export const zPutCommentsByIdApiResponse = z.object({
    data: zComment,
    status: z.enum([
        'success'
    ])
});