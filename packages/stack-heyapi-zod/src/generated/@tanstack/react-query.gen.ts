// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getUsersApi, postUsersApi, deleteUsersByIdApi, getUsersByIdApi, getPostsApi, postPostsApi, deletePostsByIdApi, getPostsByIdApi, putPostsByIdApi, getTagsApi, postTagsApi, deleteTagsByIdApi, getTagsByIdApi, getCommentsApi, postCommentsApi, deleteCommentsByIdApi, getCommentsByIdApi, putCommentsByIdApi } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { GetUsersApiData, PostUsersApiData, PostUsersApiError, PostUsersApiResponse, DeleteUsersByIdApiData, DeleteUsersByIdApiError, DeleteUsersByIdApiResponse, GetUsersByIdApiData, GetPostsApiData, GetPostsApiError, GetPostsApiResponse, PostPostsApiData, PostPostsApiError, PostPostsApiResponse, DeletePostsByIdApiData, DeletePostsByIdApiError, DeletePostsByIdApiResponse, GetPostsByIdApiData, PutPostsByIdApiData, PutPostsByIdApiError, PutPostsByIdApiResponse, GetTagsApiData, PostTagsApiData, PostTagsApiError, PostTagsApiResponse, DeleteTagsByIdApiData, DeleteTagsByIdApiError, DeleteTagsByIdApiResponse, GetTagsByIdApiData, GetCommentsApiData, PostCommentsApiData, PostCommentsApiError, PostCommentsApiResponse, DeleteCommentsByIdApiData, DeleteCommentsByIdApiError, DeleteCommentsByIdApiResponse, GetCommentsByIdApiData, PutCommentsByIdApiData, PutCommentsByIdApiError, PutCommentsByIdApiResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getUsersApiQueryKey = (options?: Options<GetUsersApiData>) => createQueryKey('getUsersApi', options);

/**
 * 全ユーザーを取得
 * システムに登録されているすべてのユーザーを取得します
 */
export const getUsersApiOptions = (options?: Options<GetUsersApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsersApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersApiQueryKey(options)
    });
};

export const postUsersApiQueryKey = (options: Options<PostUsersApiData>) => createQueryKey('postUsersApi', options);

/**
 * 新規ユーザーを作成
 * 新しいユーザーをシステムに登録します
 */
export const postUsersApiOptions = (options: Options<PostUsersApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postUsersApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postUsersApiQueryKey(options)
    });
};

/**
 * 新規ユーザーを作成
 * 新しいユーザーをシステムに登録します
 */
export const postUsersApiMutation = (options?: Partial<Options<PostUsersApiData>>): UseMutationOptions<PostUsersApiResponse, PostUsersApiError, Options<PostUsersApiData>> => {
    const mutationOptions: UseMutationOptions<PostUsersApiResponse, PostUsersApiError, Options<PostUsersApiData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postUsersApi({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * ユーザーを削除
 * 指定されたIDのユーザーを削除します
 */
export const deleteUsersByIdApiMutation = (options?: Partial<Options<DeleteUsersByIdApiData>>): UseMutationOptions<DeleteUsersByIdApiResponse, DeleteUsersByIdApiError, Options<DeleteUsersByIdApiData>> => {
    const mutationOptions: UseMutationOptions<DeleteUsersByIdApiResponse, DeleteUsersByIdApiError, Options<DeleteUsersByIdApiData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUsersByIdApi({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUsersByIdApiQueryKey = (options: Options<GetUsersByIdApiData>) => createQueryKey('getUsersByIdApi', options);

/**
 * 特定のユーザーを取得
 * 指定されたIDのユーザー情報を取得します
 */
export const getUsersByIdApiOptions = (options: Options<GetUsersByIdApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsersByIdApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersByIdApiQueryKey(options)
    });
};

export const getPostsApiQueryKey = (options?: Options<GetPostsApiData>) => createQueryKey('getPostsApi', options);

/**
 * 全投稿を取得
 * システムに登録されているすべての投稿を取得します。公開状態でフィルタ可能
 */
export const getPostsApiOptions = (options?: Options<GetPostsApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPostsApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPostsApiQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getPostsApiInfiniteQueryKey = (options?: Options<GetPostsApiData>): QueryKey<Options<GetPostsApiData>> => createQueryKey('getPostsApi', options, true);

/**
 * 全投稿を取得
 * システムに登録されているすべての投稿を取得します。公開状態でフィルタ可能
 */
export const getPostsApiInfiniteOptions = (options?: Options<GetPostsApiData>) => {
    return infiniteQueryOptions<GetPostsApiResponse, GetPostsApiError, InfiniteData<GetPostsApiResponse>, QueryKey<Options<GetPostsApiData>>, string | Pick<QueryKey<Options<GetPostsApiData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetPostsApiData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getPostsApi({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPostsApiInfiniteQueryKey(options)
    });
};

export const postPostsApiQueryKey = (options: Options<PostPostsApiData>) => createQueryKey('postPostsApi', options);

/**
 * 新規投稿を作成
 * 新しい投稿をシステムに登録します
 */
export const postPostsApiOptions = (options: Options<PostPostsApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPostsApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPostsApiQueryKey(options)
    });
};

/**
 * 新規投稿を作成
 * 新しい投稿をシステムに登録します
 */
export const postPostsApiMutation = (options?: Partial<Options<PostPostsApiData>>): UseMutationOptions<PostPostsApiResponse, PostPostsApiError, Options<PostPostsApiData>> => {
    const mutationOptions: UseMutationOptions<PostPostsApiResponse, PostPostsApiError, Options<PostPostsApiData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postPostsApi({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * 投稿を削除
 * 指定されたIDの投稿を削除します
 */
export const deletePostsByIdApiMutation = (options?: Partial<Options<DeletePostsByIdApiData>>): UseMutationOptions<DeletePostsByIdApiResponse, DeletePostsByIdApiError, Options<DeletePostsByIdApiData>> => {
    const mutationOptions: UseMutationOptions<DeletePostsByIdApiResponse, DeletePostsByIdApiError, Options<DeletePostsByIdApiData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deletePostsByIdApi({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPostsByIdApiQueryKey = (options: Options<GetPostsByIdApiData>) => createQueryKey('getPostsByIdApi', options);

/**
 * 特定の投稿を取得
 * 指定されたIDの投稿情報を取得します
 */
export const getPostsByIdApiOptions = (options: Options<GetPostsByIdApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPostsByIdApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPostsByIdApiQueryKey(options)
    });
};

/**
 * 投稿を更新
 * 指定されたIDの投稿を更新します
 */
export const putPostsByIdApiMutation = (options?: Partial<Options<PutPostsByIdApiData>>): UseMutationOptions<PutPostsByIdApiResponse, PutPostsByIdApiError, Options<PutPostsByIdApiData>> => {
    const mutationOptions: UseMutationOptions<PutPostsByIdApiResponse, PutPostsByIdApiError, Options<PutPostsByIdApiData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putPostsByIdApi({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTagsApiQueryKey = (options?: Options<GetTagsApiData>) => createQueryKey('getTagsApi', options);

/**
 * 全タグを取得
 * システムに登録されているすべてのタグを取得します
 */
export const getTagsApiOptions = (options?: Options<GetTagsApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTagsApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTagsApiQueryKey(options)
    });
};

export const postTagsApiQueryKey = (options: Options<PostTagsApiData>) => createQueryKey('postTagsApi', options);

/**
 * 新規タグを作成
 * 新しいタグをシステムに登録します
 */
export const postTagsApiOptions = (options: Options<PostTagsApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postTagsApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postTagsApiQueryKey(options)
    });
};

/**
 * 新規タグを作成
 * 新しいタグをシステムに登録します
 */
export const postTagsApiMutation = (options?: Partial<Options<PostTagsApiData>>): UseMutationOptions<PostTagsApiResponse, PostTagsApiError, Options<PostTagsApiData>> => {
    const mutationOptions: UseMutationOptions<PostTagsApiResponse, PostTagsApiError, Options<PostTagsApiData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postTagsApi({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * タグを削除
 * 指定されたIDのタグを削除します
 */
export const deleteTagsByIdApiMutation = (options?: Partial<Options<DeleteTagsByIdApiData>>): UseMutationOptions<DeleteTagsByIdApiResponse, DeleteTagsByIdApiError, Options<DeleteTagsByIdApiData>> => {
    const mutationOptions: UseMutationOptions<DeleteTagsByIdApiResponse, DeleteTagsByIdApiError, Options<DeleteTagsByIdApiData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTagsByIdApi({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTagsByIdApiQueryKey = (options: Options<GetTagsByIdApiData>) => createQueryKey('getTagsByIdApi', options);

/**
 * 特定のタグを取得
 * 指定されたIDのタグ情報を取得します
 */
export const getTagsByIdApiOptions = (options: Options<GetTagsByIdApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTagsByIdApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTagsByIdApiQueryKey(options)
    });
};

export const getCommentsApiQueryKey = (options: Options<GetCommentsApiData>) => createQueryKey('getCommentsApi', options);

/**
 * 特定の投稿のコメントを取得
 * 指定された投稿IDに関連するすべてのコメントを取得します
 */
export const getCommentsApiOptions = (options: Options<GetCommentsApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCommentsApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCommentsApiQueryKey(options)
    });
};

export const postCommentsApiQueryKey = (options: Options<PostCommentsApiData>) => createQueryKey('postCommentsApi', options);

/**
 * 新規コメントを作成
 * 新しいコメントをシステムに登録します
 */
export const postCommentsApiOptions = (options: Options<PostCommentsApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postCommentsApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postCommentsApiQueryKey(options)
    });
};

/**
 * 新規コメントを作成
 * 新しいコメントをシステムに登録します
 */
export const postCommentsApiMutation = (options?: Partial<Options<PostCommentsApiData>>): UseMutationOptions<PostCommentsApiResponse, PostCommentsApiError, Options<PostCommentsApiData>> => {
    const mutationOptions: UseMutationOptions<PostCommentsApiResponse, PostCommentsApiError, Options<PostCommentsApiData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postCommentsApi({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * コメントを削除
 * 指定されたIDのコメントを削除します
 */
export const deleteCommentsByIdApiMutation = (options?: Partial<Options<DeleteCommentsByIdApiData>>): UseMutationOptions<DeleteCommentsByIdApiResponse, DeleteCommentsByIdApiError, Options<DeleteCommentsByIdApiData>> => {
    const mutationOptions: UseMutationOptions<DeleteCommentsByIdApiResponse, DeleteCommentsByIdApiError, Options<DeleteCommentsByIdApiData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteCommentsByIdApi({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCommentsByIdApiQueryKey = (options: Options<GetCommentsByIdApiData>) => createQueryKey('getCommentsByIdApi', options);

/**
 * 特定のコメントを取得
 * 指定されたIDのコメント情報を取得します
 */
export const getCommentsByIdApiOptions = (options: Options<GetCommentsByIdApiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCommentsByIdApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCommentsByIdApiQueryKey(options)
    });
};

/**
 * コメントを更新
 * 指定されたIDのコメントを更新します
 */
export const putCommentsByIdApiMutation = (options?: Partial<Options<PutCommentsByIdApiData>>): UseMutationOptions<PutCommentsByIdApiResponse, PutCommentsByIdApiError, Options<PutCommentsByIdApiData>> => {
    const mutationOptions: UseMutationOptions<PutCommentsByIdApiResponse, PutCommentsByIdApiError, Options<PutCommentsByIdApiData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putCommentsByIdApi({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};