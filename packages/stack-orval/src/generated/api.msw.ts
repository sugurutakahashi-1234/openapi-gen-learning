/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MyApp API
 * „É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜAPI
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  GetCommentsApi200,
  GetCommentsByIdApi200,
  GetPostsApi200,
  GetPostsByIdApi200,
  GetTagsApi200,
  GetTagsByIdApi200,
  GetUsersApi200,
  GetUsersByIdApi200,
  PostCommentsApi201,
  PostPostsApi201,
  PostTagsApi201,
  PostUsersApi201,
  PutCommentsByIdApi200,
  PutPostsByIdApi200
} from './model';


export const getGetUsersApiResponseMock = (overrideResponse: Partial< GetUsersApi200 > = {}): GetUsersApi200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 100}}), email: faker.internet.email(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getPostUsersApiResponseMock = (overrideResponse: Partial< PostUsersApi201 > = {}): PostUsersApi201 => ({data: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 100}}), email: faker.internet.email(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getGetUsersByIdApiResponseMock = (overrideResponse: Partial< GetUsersByIdApi200 > = {}): GetUsersByIdApi200 => ({data: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 100}}), email: faker.internet.email(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getGetPostsApiResponseMock = (overrideResponse: Partial< GetPostsApi200 > = {}): GetPostsApi200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha({length: {min: 10, max: 20}}), title: faker.string.alpha({length: {min: 1, max: 200}}), content: faker.string.alpha({length: {min: 10, max: 20}}), published: faker.datatype.boolean(), userId: faker.string.alpha({length: {min: 10, max: 20}}), tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({postId: faker.string.alpha({length: {min: 10, max: 20}}), tagId: faker.string.alpha({length: {min: 10, max: 20}}), tag: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 50}}), slug: faker.helpers.fromRegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$'), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, taggedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getPostPostsApiResponseMock = (overrideResponse: Partial< PostPostsApi201 > = {}): PostPostsApi201 => ({data: {id: faker.string.alpha({length: {min: 10, max: 20}}), title: faker.string.alpha({length: {min: 1, max: 200}}), content: faker.string.alpha({length: {min: 10, max: 20}}), published: faker.datatype.boolean(), userId: faker.string.alpha({length: {min: 10, max: 20}}), tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({postId: faker.string.alpha({length: {min: 10, max: 20}}), tagId: faker.string.alpha({length: {min: 10, max: 20}}), tag: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 50}}), slug: faker.helpers.fromRegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$'), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, taggedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getGetPostsByIdApiResponseMock = (overrideResponse: Partial< GetPostsByIdApi200 > = {}): GetPostsByIdApi200 => ({data: {id: faker.string.alpha({length: {min: 10, max: 20}}), title: faker.string.alpha({length: {min: 1, max: 200}}), content: faker.string.alpha({length: {min: 10, max: 20}}), published: faker.datatype.boolean(), userId: faker.string.alpha({length: {min: 10, max: 20}}), tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({postId: faker.string.alpha({length: {min: 10, max: 20}}), tagId: faker.string.alpha({length: {min: 10, max: 20}}), tag: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 50}}), slug: faker.helpers.fromRegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$'), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, taggedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getPutPostsByIdApiResponseMock = (overrideResponse: Partial< PutPostsByIdApi200 > = {}): PutPostsByIdApi200 => ({data: {id: faker.string.alpha({length: {min: 10, max: 20}}), title: faker.string.alpha({length: {min: 1, max: 200}}), content: faker.string.alpha({length: {min: 10, max: 20}}), published: faker.datatype.boolean(), userId: faker.string.alpha({length: {min: 10, max: 20}}), tags: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({postId: faker.string.alpha({length: {min: 10, max: 20}}), tagId: faker.string.alpha({length: {min: 10, max: 20}}), tag: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 50}}), slug: faker.helpers.fromRegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$'), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, taggedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getGetTagsApiResponseMock = (overrideResponse: Partial< GetTagsApi200 > = {}): GetTagsApi200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 50}}), slug: faker.helpers.fromRegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$'), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getPostTagsApiResponseMock = (overrideResponse: Partial< PostTagsApi201 > = {}): PostTagsApi201 => ({data: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 50}}), slug: faker.helpers.fromRegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$'), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getGetTagsByIdApiResponseMock = (overrideResponse: Partial< GetTagsByIdApi200 > = {}): GetTagsByIdApi200 => ({data: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 50}}), slug: faker.helpers.fromRegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$'), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getGetCommentsApiResponseMock = (overrideResponse: Partial< GetCommentsApi200 > = {}): GetCommentsApi200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha({length: {min: 10, max: 20}}), content: faker.string.alpha({length: {min: 1, max: 20}}), postId: faker.string.alpha({length: {min: 10, max: 20}}), user: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 100}}), email: faker.internet.email()}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getPostCommentsApiResponseMock = (overrideResponse: Partial< PostCommentsApi201 > = {}): PostCommentsApi201 => ({data: {id: faker.string.alpha({length: {min: 10, max: 20}}), content: faker.string.alpha({length: {min: 1, max: 20}}), postId: faker.string.alpha({length: {min: 10, max: 20}}), user: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 100}}), email: faker.internet.email()}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getGetCommentsByIdApiResponseMock = (overrideResponse: Partial< GetCommentsByIdApi200 > = {}): GetCommentsByIdApi200 => ({data: {id: faker.string.alpha({length: {min: 10, max: 20}}), content: faker.string.alpha({length: {min: 1, max: 20}}), postId: faker.string.alpha({length: {min: 10, max: 20}}), user: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 100}}), email: faker.internet.email()}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getPutCommentsByIdApiResponseMock = (overrideResponse: Partial< PutCommentsByIdApi200 > = {}): PutCommentsByIdApi200 => ({data: {id: faker.string.alpha({length: {min: 10, max: 20}}), content: faker.string.alpha({length: {min: 1, max: 20}}), postId: faker.string.alpha({length: {min: 10, max: 20}}), user: {id: faker.string.alpha({length: {min: 10, max: 20}}), name: faker.string.alpha({length: {min: 1, max: 100}}), email: faker.internet.email()}, createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})


export const getGetUsersApiMockHandler = (overrideResponse?: GetUsersApi200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetUsersApi200> | GetUsersApi200)) => {
  return http.get('http://localhost:4010/api/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetUsersApiResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostUsersApiMockHandler = (overrideResponse?: PostUsersApi201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostUsersApi201> | PostUsersApi201)) => {
  return http.post('http://localhost:4010/api/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostUsersApiResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetUsersByIdApiMockHandler = (overrideResponse?: GetUsersByIdApi200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetUsersByIdApi200> | GetUsersByIdApi200)) => {
  return http.get('http://localhost:4010/api/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetUsersByIdApiResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteUsersByIdApiMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('http://localhost:4010/api/users/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetPostsApiMockHandler = (overrideResponse?: GetPostsApi200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetPostsApi200> | GetPostsApi200)) => {
  return http.get('http://localhost:4010/api/posts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetPostsApiResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostPostsApiMockHandler = (overrideResponse?: PostPostsApi201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostPostsApi201> | PostPostsApi201)) => {
  return http.post('http://localhost:4010/api/posts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostPostsApiResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetPostsByIdApiMockHandler = (overrideResponse?: GetPostsByIdApi200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetPostsByIdApi200> | GetPostsByIdApi200)) => {
  return http.get('http://localhost:4010/api/posts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetPostsByIdApiResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutPostsByIdApiMockHandler = (overrideResponse?: PutPostsByIdApi200 | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PutPostsByIdApi200> | PutPostsByIdApi200)) => {
  return http.put('http://localhost:4010/api/posts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPutPostsByIdApiResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeletePostsByIdApiMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('http://localhost:4010/api/posts/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetTagsApiMockHandler = (overrideResponse?: GetTagsApi200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTagsApi200> | GetTagsApi200)) => {
  return http.get('http://localhost:4010/api/tags', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetTagsApiResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostTagsApiMockHandler = (overrideResponse?: PostTagsApi201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostTagsApi201> | PostTagsApi201)) => {
  return http.post('http://localhost:4010/api/tags', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostTagsApiResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTagsByIdApiMockHandler = (overrideResponse?: GetTagsByIdApi200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTagsByIdApi200> | GetTagsByIdApi200)) => {
  return http.get('http://localhost:4010/api/tags/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetTagsByIdApiResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteTagsByIdApiMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('http://localhost:4010/api/tags/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetCommentsApiMockHandler = (overrideResponse?: GetCommentsApi200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetCommentsApi200> | GetCommentsApi200)) => {
  return http.get('http://localhost:4010/api/comments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetCommentsApiResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostCommentsApiMockHandler = (overrideResponse?: PostCommentsApi201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostCommentsApi201> | PostCommentsApi201)) => {
  return http.post('http://localhost:4010/api/comments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostCommentsApiResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCommentsByIdApiMockHandler = (overrideResponse?: GetCommentsByIdApi200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetCommentsByIdApi200> | GetCommentsByIdApi200)) => {
  return http.get('http://localhost:4010/api/comments/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetCommentsByIdApiResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutCommentsByIdApiMockHandler = (overrideResponse?: PutCommentsByIdApi200 | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PutCommentsByIdApi200> | PutCommentsByIdApi200)) => {
  return http.put('http://localhost:4010/api/comments/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPutCommentsByIdApiResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteCommentsByIdApiMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('http://localhost:4010/api/comments/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getMyAppAPIMock = () => [
  getGetUsersApiMockHandler(),
  getPostUsersApiMockHandler(),
  getGetUsersByIdApiMockHandler(),
  getDeleteUsersByIdApiMockHandler(),
  getGetPostsApiMockHandler(),
  getPostPostsApiMockHandler(),
  getGetPostsByIdApiMockHandler(),
  getPutPostsByIdApiMockHandler(),
  getDeletePostsByIdApiMockHandler(),
  getGetTagsApiMockHandler(),
  getPostTagsApiMockHandler(),
  getGetTagsByIdApiMockHandler(),
  getDeleteTagsByIdApiMockHandler(),
  getGetCommentsApiMockHandler(),
  getPostCommentsApiMockHandler(),
  getGetCommentsByIdApiMockHandler(),
  getPutCommentsByIdApiMockHandler(),
  getDeleteCommentsByIdApiMockHandler()
]
