/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * MyApp API
 * ユーザー管理API
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * システムに登録されているすべてのユーザーを取得します
 * @summary 全ユーザーを取得
 */
export const getUsersApiResponseDataItemNameMax = 100;


export const getUsersApiResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "name": zod.string().min(1).max(getUsersApiResponseDataItemNameMax).describe('名前'),
  "email": zod.string().email().describe('メールアドレス'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('ユーザー情報')),
  "status": zod.enum(['success']).describe('成功ステータス')
})


/**
 * 新しいユーザーをシステムに登録します
 * @summary 新規ユーザーを作成
 */
export const postUsersApiBodyNameMax = 100;


export const postUsersApiBody = zod.object({
  "name": zod.string().min(1).max(postUsersApiBodyNameMax).describe('名前'),
  "email": zod.string().email().describe('メールアドレス')
}).describe('ユーザー作成リクエスト')


/**
 * 指定されたIDのユーザー情報を取得します
 * @summary 特定のユーザーを取得
 */
export const getUsersByIdApiParams = zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）')
})

export const getUsersByIdApiResponseDataNameMax = 100;


export const getUsersByIdApiResponse = zod.object({
  "data": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "name": zod.string().min(1).max(getUsersByIdApiResponseDataNameMax).describe('名前'),
  "email": zod.string().email().describe('メールアドレス'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('ユーザー情報'),
  "status": zod.enum(['success']).describe('成功ステータス')
})


/**
 * 指定されたIDのユーザーを削除します
 * @summary ユーザーを削除
 */
export const deleteUsersByIdApiParams = zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）')
})


/**
 * システムに登録されているすべての投稿を取得します。公開状態でフィルタ可能
 * @summary 全投稿を取得
 */
export const getPostsApiQueryPageDefault = "1";export const getPostsApiQueryLimitDefault = "10";

export const getPostsApiQueryParams = zod.object({
  "page": zod.string().default(getPostsApiQueryPageDefault).describe('ページ番号（1から開始）'),
  "limit": zod.string().default(getPostsApiQueryLimitDefault).describe('1ページあたりの件数（最大100）'),
  "userId": zod.string().optional().describe('ユーザーIDでフィルタリング'),
  "published": zod.string().optional().describe('公開状態でフィルタリング')
})

export const getPostsApiResponseDataItemTitleMax = 200;
export const getPostsApiResponseDataItemTagsItemTagNameMax = 50;
export const getPostsApiResponseDataItemTagsItemTagSlugRegExp = new RegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$');


export const getPostsApiResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "title": zod.string().min(1).max(getPostsApiResponseDataItemTitleMax).describe('タイトル'),
  "content": zod.string().describe('本文'),
  "published": zod.boolean().describe('公開状態（必ずtrue/false）'),
  "userId": zod.string().describe('投稿者ID'),
  "tags": zod.array(zod.object({
  "postId": zod.string().describe('投稿ID'),
  "tagId": zod.string().describe('タグID'),
  "tag": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "name": zod.string().min(1).max(getPostsApiResponseDataItemTagsItemTagNameMax).describe('タグ名'),
  "slug": zod.string().regex(getPostsApiResponseDataItemTagsItemTagSlugRegExp).describe('URLスラッグ'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('タグ情報'),
  "taggedAt": zod.string().datetime({}).describe('タグ付け日時')
}).describe('投稿とタグの関連情報')).describe('タグ一覧（空配列の可能性あり）'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('投稿情報')),
  "status": zod.enum(['success']).describe('成功ステータス')
})


/**
 * 新しい投稿をシステムに登録します
 * @summary 新規投稿を作成
 */
export const postPostsApiBodyTitleMax = 200;
export const postPostsApiBodyPublishedDefault = false;

export const postPostsApiBody = zod.object({
  "title": zod.string().min(1).max(postPostsApiBodyTitleMax).describe('タイトル（必須）'),
  "content": zod.string().min(1).describe('本文（必須）'),
  "published": zod.boolean().optional().describe('公開状態（省略時: false）'),
  "userId": zod.string().describe('投稿者ID（必須）'),
  "tagIds": zod.array(zod.string()).optional().describe('タグIDの配列（省略時: タグなし）')
}).describe('投稿作成リクエスト')


/**
 * 指定されたIDの投稿情報を取得します
 * @summary 特定の投稿を取得
 */
export const getPostsByIdApiParams = zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）')
})

export const getPostsByIdApiResponseDataTitleMax = 200;
export const getPostsByIdApiResponseDataTagsItemTagNameMax = 50;
export const getPostsByIdApiResponseDataTagsItemTagSlugRegExp = new RegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$');


export const getPostsByIdApiResponse = zod.object({
  "data": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "title": zod.string().min(1).max(getPostsByIdApiResponseDataTitleMax).describe('タイトル'),
  "content": zod.string().describe('本文'),
  "published": zod.boolean().describe('公開状態（必ずtrue/false）'),
  "userId": zod.string().describe('投稿者ID'),
  "tags": zod.array(zod.object({
  "postId": zod.string().describe('投稿ID'),
  "tagId": zod.string().describe('タグID'),
  "tag": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "name": zod.string().min(1).max(getPostsByIdApiResponseDataTagsItemTagNameMax).describe('タグ名'),
  "slug": zod.string().regex(getPostsByIdApiResponseDataTagsItemTagSlugRegExp).describe('URLスラッグ'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('タグ情報'),
  "taggedAt": zod.string().datetime({}).describe('タグ付け日時')
}).describe('投稿とタグの関連情報')).describe('タグ一覧（空配列の可能性あり）'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('投稿情報'),
  "status": zod.enum(['success']).describe('成功ステータス')
})


/**
 * 指定されたIDの投稿を更新します
 * @summary 投稿を更新
 */
export const putPostsByIdApiParams = zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）')
})

export const putPostsByIdApiBodyTitleMax = 200;


export const putPostsByIdApiBody = zod.object({
  "title": zod.string().min(1).max(putPostsByIdApiBodyTitleMax).optional().describe('タイトル（更新する場合のみ指定）'),
  "content": zod.string().min(1).optional().describe('本文（更新する場合のみ指定）'),
  "published": zod.boolean().optional().describe('公開状態（更新する場合のみ指定）'),
  "tagIds": zod.array(zod.string()).optional().describe('タグIDの配列 - 省略時: 変更なし、空配列: すべて削除、配列指定: 完全置換')
}).describe('投稿更新リクエスト（PATCH）')

export const putPostsByIdApiResponseDataTitleMax = 200;
export const putPostsByIdApiResponseDataTagsItemTagNameMax = 50;
export const putPostsByIdApiResponseDataTagsItemTagSlugRegExp = new RegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$');


export const putPostsByIdApiResponse = zod.object({
  "data": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "title": zod.string().min(1).max(putPostsByIdApiResponseDataTitleMax).describe('タイトル'),
  "content": zod.string().describe('本文'),
  "published": zod.boolean().describe('公開状態（必ずtrue/false）'),
  "userId": zod.string().describe('投稿者ID'),
  "tags": zod.array(zod.object({
  "postId": zod.string().describe('投稿ID'),
  "tagId": zod.string().describe('タグID'),
  "tag": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "name": zod.string().min(1).max(putPostsByIdApiResponseDataTagsItemTagNameMax).describe('タグ名'),
  "slug": zod.string().regex(putPostsByIdApiResponseDataTagsItemTagSlugRegExp).describe('URLスラッグ'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('タグ情報'),
  "taggedAt": zod.string().datetime({}).describe('タグ付け日時')
}).describe('投稿とタグの関連情報')).describe('タグ一覧（空配列の可能性あり）'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('投稿情報'),
  "status": zod.enum(['success']).describe('成功ステータス')
})


/**
 * 指定されたIDの投稿を削除します
 * @summary 投稿を削除
 */
export const deletePostsByIdApiParams = zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）')
})


/**
 * システムに登録されているすべてのタグを取得します
 * @summary 全タグを取得
 */
export const getTagsApiResponseDataItemNameMax = 50;
export const getTagsApiResponseDataItemSlugRegExp = new RegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$');


export const getTagsApiResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "name": zod.string().min(1).max(getTagsApiResponseDataItemNameMax).describe('タグ名'),
  "slug": zod.string().regex(getTagsApiResponseDataItemSlugRegExp).describe('URLスラッグ'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('タグ情報')),
  "status": zod.enum(['success']).describe('成功ステータス')
})


/**
 * 新しいタグをシステムに登録します
 * @summary 新規タグを作成
 */
export const postTagsApiBodyNameMax = 50;
export const postTagsApiBodySlugRegExp = new RegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$');


export const postTagsApiBody = zod.object({
  "name": zod.string().min(1).max(postTagsApiBodyNameMax).describe('タグ名'),
  "slug": zod.string().regex(postTagsApiBodySlugRegExp).describe('URLスラッグ')
}).describe('タグ作成リクエスト')


/**
 * 指定されたIDのタグ情報を取得します
 * @summary 特定のタグを取得
 */
export const getTagsByIdApiParams = zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）')
})

export const getTagsByIdApiResponseDataNameMax = 50;
export const getTagsByIdApiResponseDataSlugRegExp = new RegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$');


export const getTagsByIdApiResponse = zod.object({
  "data": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "name": zod.string().min(1).max(getTagsByIdApiResponseDataNameMax).describe('タグ名'),
  "slug": zod.string().regex(getTagsByIdApiResponseDataSlugRegExp).describe('URLスラッグ'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('タグ情報'),
  "status": zod.enum(['success']).describe('成功ステータス')
})


/**
 * 指定されたIDのタグを削除します
 * @summary タグを削除
 */
export const deleteTagsByIdApiParams = zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）')
})


/**
 * 指定された投稿IDに関連するすべてのコメントを取得します
 * @summary 特定の投稿のコメントを取得
 */
export const getCommentsApiQueryParams = zod.object({
  "postId": zod.string().describe('投稿ID')
})

export const getCommentsApiResponseDataItemUserNameMax = 100;


export const getCommentsApiResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "content": zod.string().min(1).describe('コメント内容'),
  "postId": zod.string().describe('投稿ID'),
  "user": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "name": zod.string().min(1).max(getCommentsApiResponseDataItemUserNameMax).describe('名前'),
  "email": zod.string().email().describe('メールアドレス')
}).describe('ユーザー情報'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('コメント情報')),
  "status": zod.enum(['success']).describe('成功ステータス')
})


/**
 * 新しいコメントをシステムに登録します
 * @summary 新規コメントを作成
 */
export const postCommentsApiBody = zod.object({
  "content": zod.string().min(1).describe('コメント内容'),
  "postId": zod.string().describe('投稿ID'),
  "userId": zod.string().describe('ユーザーID')
}).describe('コメント作成リクエスト')


/**
 * 指定されたIDのコメント情報を取得します
 * @summary 特定のコメントを取得
 */
export const getCommentsByIdApiParams = zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）')
})

export const getCommentsByIdApiResponseDataUserNameMax = 100;


export const getCommentsByIdApiResponse = zod.object({
  "data": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "content": zod.string().min(1).describe('コメント内容'),
  "postId": zod.string().describe('投稿ID'),
  "user": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "name": zod.string().min(1).max(getCommentsByIdApiResponseDataUserNameMax).describe('名前'),
  "email": zod.string().email().describe('メールアドレス')
}).describe('ユーザー情報'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('コメント情報'),
  "status": zod.enum(['success']).describe('成功ステータス')
})


/**
 * 指定されたIDのコメントを更新します
 * @summary コメントを更新
 */
export const putCommentsByIdApiParams = zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）')
})

export const putCommentsByIdApiBody = zod.object({
  "content": zod.string().min(1).describe('コメント内容')
}).describe('コメント更新リクエスト')

export const putCommentsByIdApiResponseDataUserNameMax = 100;


export const putCommentsByIdApiResponse = zod.object({
  "data": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "content": zod.string().min(1).describe('コメント内容'),
  "postId": zod.string().describe('投稿ID'),
  "user": zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）'),
  "name": zod.string().min(1).max(putCommentsByIdApiResponseDataUserNameMax).describe('名前'),
  "email": zod.string().email().describe('メールアドレス')
}).describe('ユーザー情報'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('コメント情報'),
  "status": zod.enum(['success']).describe('成功ステータス')
})


/**
 * 指定されたIDのコメントを削除します
 * @summary コメントを削除
 */
export const deleteCommentsByIdApiParams = zod.object({
  "id": zod.string().describe('一意識別子（CUID形式）')
})


