/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * MyApp API
 * „É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜAPI
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateComment,
  CreatePost,
  CreateTag,
  CreateUser,
  ErrorResponse,
  GetCommentsApi200,
  GetCommentsApiParams,
  GetCommentsByIdApi200,
  GetPostsApi200,
  GetPostsApiParams,
  GetPostsByIdApi200,
  GetTagsApi200,
  GetTagsByIdApi200,
  GetUsersApi200,
  GetUsersByIdApi200,
  PostCommentsApi201,
  PostPostsApi201,
  PostTagsApi201,
  PostUsersApi201,
  PutCommentsByIdApi200,
  PutPostsByIdApi200,
  UpdateComment,
  UpdatePost
} from './model';





/**
 * „Ç∑„Çπ„ÉÜ„É†„Å´ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã„Åô„Åπ„Å¶„ÅÆ„É¶„Éº„Ç∂„Éº„ÇíÂèñÂæó„Åó„Åæ„Åô
 * @summary ÂÖ®„É¶„Éº„Ç∂„Éº„ÇíÂèñÂæó
 */
export const getUsersApi = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUsersApi200>> => {
    
    
    return axios.get(
      `/api/users`,options
    );
  }


export const getGetUsersApiQueryKey = () => {
    return [`/api/users`] as const;
    }

    
export const getGetUsersApiQueryOptions = <TData = Awaited<ReturnType<typeof getUsersApi>>, TError = AxiosError<ErrorResponse>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersApi>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersApiQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersApi>>> = ({ signal }) => getUsersApi({ ...(signal ? { signal } : {}), ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersApi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersApiQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersApi>>>
export type GetUsersApiQueryError = AxiosError<ErrorResponse>


export function useGetUsersApi<TData = Awaited<ReturnType<typeof getUsersApi>>, TError = AxiosError<ErrorResponse>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersApi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersApi>>,
          TError,
          Awaited<ReturnType<typeof getUsersApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersApi<TData = Awaited<ReturnType<typeof getUsersApi>>, TError = AxiosError<ErrorResponse>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersApi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersApi>>,
          TError,
          Awaited<ReturnType<typeof getUsersApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersApi<TData = Awaited<ReturnType<typeof getUsersApi>>, TError = AxiosError<ErrorResponse>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÂÖ®„É¶„Éº„Ç∂„Éº„ÇíÂèñÂæó
 */

export function useGetUsersApi<TData = Awaited<ReturnType<typeof getUsersApi>>, TError = AxiosError<ErrorResponse>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersApiQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Êñ∞„Åó„ÅÑ„É¶„Éº„Ç∂„Éº„Çí„Ç∑„Çπ„ÉÜ„É†„Å´ÁôªÈå≤„Åó„Åæ„Åô
 * @summary Êñ∞Ë¶è„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê
 */
export const postUsersApi = (
    createUser: CreateUser, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostUsersApi201>> => {
    
    
    return axios.post(
      `/api/users`,
      createUser,options
    );
  }



export const getPostUsersApiMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersApi>>, TError,{data: CreateUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUsersApi>>, TError,{data: CreateUser}, TContext> => {

const mutationKey = ['postUsersApi'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersApi>>, {data: CreateUser}> = (props) => {
          const {data} = props ?? {};

          return  postUsersApi(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersApiMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersApi>>>
    export type PostUsersApiMutationBody = CreateUser
    export type PostUsersApiMutationError = AxiosError<ErrorResponse>

    /**
 * @summary Êñ∞Ë¶è„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê
 */
export const usePostUsersApi = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersApi>>, TError,{data: CreateUser}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postUsersApi>>,
        TError,
        {data: CreateUser},
        TContext
      > => {

      const mutationOptions = getPostUsersApiMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åæ„Åô
 * @summary ÁâπÂÆö„ÅÆ„É¶„Éº„Ç∂„Éº„ÇíÂèñÂæó
 */
export const getUsersByIdApi = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUsersByIdApi200>> => {
    
    
    return axios.get(
      `/api/users/${id}`,options
    );
  }


export const getGetUsersByIdApiQueryKey = (id: string,) => {
    return [`/api/users/${id}`] as const;
    }

    
export const getGetUsersByIdApiQueryOptions = <TData = Awaited<ReturnType<typeof getUsersByIdApi>>, TError = AxiosError<ErrorResponse>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersByIdApiQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersByIdApi>>> = ({ signal }) => getUsersByIdApi(id, { ...(signal ? { signal } : {}), ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersByIdApi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersByIdApiQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersByIdApi>>>
export type GetUsersByIdApiQueryError = AxiosError<ErrorResponse>


export function useGetUsersByIdApi<TData = Awaited<ReturnType<typeof getUsersByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersByIdApi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersByIdApi>>,
          TError,
          Awaited<ReturnType<typeof getUsersByIdApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersByIdApi<TData = Awaited<ReturnType<typeof getUsersByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersByIdApi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersByIdApi>>,
          TError,
          Awaited<ReturnType<typeof getUsersByIdApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersByIdApi<TData = Awaited<ReturnType<typeof getUsersByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÁâπÂÆö„ÅÆ„É¶„Éº„Ç∂„Éº„ÇíÂèñÂæó
 */

export function useGetUsersByIdApi<TData = Awaited<ReturnType<typeof getUsersByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersByIdApiQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆ„É¶„Éº„Ç∂„Éº„ÇíÂâäÈô§„Åó„Åæ„Åô
 * @summary „É¶„Éº„Ç∂„Éº„ÇíÂâäÈô§
 */
export const deleteUsersByIdApi = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/api/users/${id}`,options
    );
  }



export const getDeleteUsersByIdApiMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersByIdApi>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUsersByIdApi>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteUsersByIdApi'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUsersByIdApi>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteUsersByIdApi(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUsersByIdApiMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUsersByIdApi>>>
    
    export type DeleteUsersByIdApiMutationError = AxiosError<ErrorResponse>

    /**
 * @summary „É¶„Éº„Ç∂„Éº„ÇíÂâäÈô§
 */
export const useDeleteUsersByIdApi = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersByIdApi>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteUsersByIdApi>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteUsersByIdApiMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * „Ç∑„Çπ„ÉÜ„É†„Å´ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã„Åô„Åπ„Å¶„ÅÆÊäïÁ®ø„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇÂÖ¨ÈñãÁä∂ÊÖã„Åß„Éï„Ç£„É´„ÇøÂèØËÉΩ
 * @summary ÂÖ®ÊäïÁ®ø„ÇíÂèñÂæó
 */
export const getPostsApi = (
    params?: GetPostsApiParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetPostsApi200>> => {
    
    
    return axios.get(
      `/api/posts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetPostsApiQueryKey = (params?: GetPostsApiParams,) => {
    return [`/api/posts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPostsApiQueryOptions = <TData = Awaited<ReturnType<typeof getPostsApi>>, TError = AxiosError<ErrorResponse>>(params?: GetPostsApiParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsApi>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsApiQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsApi>>> = ({ signal }) => getPostsApi(params, { ...(signal ? { signal } : {}), ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPostsApi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPostsApiQueryResult = NonNullable<Awaited<ReturnType<typeof getPostsApi>>>
export type GetPostsApiQueryError = AxiosError<ErrorResponse>


export function useGetPostsApi<TData = Awaited<ReturnType<typeof getPostsApi>>, TError = AxiosError<ErrorResponse>>(
 params: undefined |  GetPostsApiParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsApi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsApi>>,
          TError,
          Awaited<ReturnType<typeof getPostsApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostsApi<TData = Awaited<ReturnType<typeof getPostsApi>>, TError = AxiosError<ErrorResponse>>(
 params?: GetPostsApiParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsApi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsApi>>,
          TError,
          Awaited<ReturnType<typeof getPostsApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostsApi<TData = Awaited<ReturnType<typeof getPostsApi>>, TError = AxiosError<ErrorResponse>>(
 params?: GetPostsApiParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÂÖ®ÊäïÁ®ø„ÇíÂèñÂæó
 */

export function useGetPostsApi<TData = Awaited<ReturnType<typeof getPostsApi>>, TError = AxiosError<ErrorResponse>>(
 params?: GetPostsApiParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPostsApiQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Êñ∞„Åó„ÅÑÊäïÁ®ø„Çí„Ç∑„Çπ„ÉÜ„É†„Å´ÁôªÈå≤„Åó„Åæ„Åô
 * @summary Êñ∞Ë¶èÊäïÁ®ø„Çí‰ΩúÊàê
 */
export const postPostsApi = (
    createPost: CreatePost, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostPostsApi201>> => {
    
    
    return axios.post(
      `/api/posts`,
      createPost,options
    );
  }



export const getPostPostsApiMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPostsApi>>, TError,{data: CreatePost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postPostsApi>>, TError,{data: CreatePost}, TContext> => {

const mutationKey = ['postPostsApi'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPostsApi>>, {data: CreatePost}> = (props) => {
          const {data} = props ?? {};

          return  postPostsApi(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostPostsApiMutationResult = NonNullable<Awaited<ReturnType<typeof postPostsApi>>>
    export type PostPostsApiMutationBody = CreatePost
    export type PostPostsApiMutationError = AxiosError<ErrorResponse>

    /**
 * @summary Êñ∞Ë¶èÊäïÁ®ø„Çí‰ΩúÊàê
 */
export const usePostPostsApi = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPostsApi>>, TError,{data: CreatePost}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postPostsApi>>,
        TError,
        {data: CreatePost},
        TContext
      > => {

      const mutationOptions = getPostPostsApiMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆÊäïÁ®øÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åæ„Åô
 * @summary ÁâπÂÆö„ÅÆÊäïÁ®ø„ÇíÂèñÂæó
 */
export const getPostsByIdApi = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetPostsByIdApi200>> => {
    
    
    return axios.get(
      `/api/posts/${id}`,options
    );
  }


export const getGetPostsByIdApiQueryKey = (id: string,) => {
    return [`/api/posts/${id}`] as const;
    }

    
export const getGetPostsByIdApiQueryOptions = <TData = Awaited<ReturnType<typeof getPostsByIdApi>>, TError = AxiosError<ErrorResponse>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsByIdApiQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsByIdApi>>> = ({ signal }) => getPostsByIdApi(id, { ...(signal ? { signal } : {}), ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPostsByIdApi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPostsByIdApiQueryResult = NonNullable<Awaited<ReturnType<typeof getPostsByIdApi>>>
export type GetPostsByIdApiQueryError = AxiosError<ErrorResponse>


export function useGetPostsByIdApi<TData = Awaited<ReturnType<typeof getPostsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsByIdApi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsByIdApi>>,
          TError,
          Awaited<ReturnType<typeof getPostsByIdApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostsByIdApi<TData = Awaited<ReturnType<typeof getPostsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsByIdApi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsByIdApi>>,
          TError,
          Awaited<ReturnType<typeof getPostsByIdApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostsByIdApi<TData = Awaited<ReturnType<typeof getPostsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÁâπÂÆö„ÅÆÊäïÁ®ø„ÇíÂèñÂæó
 */

export function useGetPostsByIdApi<TData = Awaited<ReturnType<typeof getPostsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPostsByIdApiQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆÊäïÁ®ø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô
 * @summary ÊäïÁ®ø„ÇíÊõ¥Êñ∞
 */
export const putPostsByIdApi = (
    id: string,
    updatePost: UpdatePost, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutPostsByIdApi200>> => {
    
    
    return axios.put(
      `/api/posts/${id}`,
      updatePost,options
    );
  }



export const getPutPostsByIdApiMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPostsByIdApi>>, TError,{id: string;data: UpdatePost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putPostsByIdApi>>, TError,{id: string;data: UpdatePost}, TContext> => {

const mutationKey = ['putPostsByIdApi'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putPostsByIdApi>>, {id: string;data: UpdatePost}> = (props) => {
          const {id,data} = props ?? {};

          return  putPostsByIdApi(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutPostsByIdApiMutationResult = NonNullable<Awaited<ReturnType<typeof putPostsByIdApi>>>
    export type PutPostsByIdApiMutationBody = UpdatePost
    export type PutPostsByIdApiMutationError = AxiosError<ErrorResponse>

    /**
 * @summary ÊäïÁ®ø„ÇíÊõ¥Êñ∞
 */
export const usePutPostsByIdApi = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPostsByIdApi>>, TError,{id: string;data: UpdatePost}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putPostsByIdApi>>,
        TError,
        {id: string;data: UpdatePost},
        TContext
      > => {

      const mutationOptions = getPutPostsByIdApiMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆÊäïÁ®ø„ÇíÂâäÈô§„Åó„Åæ„Åô
 * @summary ÊäïÁ®ø„ÇíÂâäÈô§
 */
export const deletePostsByIdApi = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/api/posts/${id}`,options
    );
  }



export const getDeletePostsByIdApiMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePostsByIdApi>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deletePostsByIdApi>>, TError,{id: string}, TContext> => {

const mutationKey = ['deletePostsByIdApi'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePostsByIdApi>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deletePostsByIdApi(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePostsByIdApiMutationResult = NonNullable<Awaited<ReturnType<typeof deletePostsByIdApi>>>
    
    export type DeletePostsByIdApiMutationError = AxiosError<ErrorResponse>

    /**
 * @summary ÊäïÁ®ø„ÇíÂâäÈô§
 */
export const useDeletePostsByIdApi = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePostsByIdApi>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePostsByIdApi>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeletePostsByIdApiMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * „Ç∑„Çπ„ÉÜ„É†„Å´ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã„Åô„Åπ„Å¶„ÅÆ„Çø„Ç∞„ÇíÂèñÂæó„Åó„Åæ„Åô
 * @summary ÂÖ®„Çø„Ç∞„ÇíÂèñÂæó
 */
export const getTagsApi = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetTagsApi200>> => {
    
    
    return axios.get(
      `/api/tags`,options
    );
  }


export const getGetTagsApiQueryKey = () => {
    return [`/api/tags`] as const;
    }

    
export const getGetTagsApiQueryOptions = <TData = Awaited<ReturnType<typeof getTagsApi>>, TError = AxiosError<ErrorResponse>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTagsApi>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTagsApiQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTagsApi>>> = ({ signal }) => getTagsApi({ ...(signal ? { signal } : {}), ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTagsApi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTagsApiQueryResult = NonNullable<Awaited<ReturnType<typeof getTagsApi>>>
export type GetTagsApiQueryError = AxiosError<ErrorResponse>


export function useGetTagsApi<TData = Awaited<ReturnType<typeof getTagsApi>>, TError = AxiosError<ErrorResponse>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTagsApi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTagsApi>>,
          TError,
          Awaited<ReturnType<typeof getTagsApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTagsApi<TData = Awaited<ReturnType<typeof getTagsApi>>, TError = AxiosError<ErrorResponse>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTagsApi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTagsApi>>,
          TError,
          Awaited<ReturnType<typeof getTagsApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTagsApi<TData = Awaited<ReturnType<typeof getTagsApi>>, TError = AxiosError<ErrorResponse>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTagsApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÂÖ®„Çø„Ç∞„ÇíÂèñÂæó
 */

export function useGetTagsApi<TData = Awaited<ReturnType<typeof getTagsApi>>, TError = AxiosError<ErrorResponse>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTagsApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTagsApiQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Êñ∞„Åó„ÅÑ„Çø„Ç∞„Çí„Ç∑„Çπ„ÉÜ„É†„Å´ÁôªÈå≤„Åó„Åæ„Åô
 * @summary Êñ∞Ë¶è„Çø„Ç∞„Çí‰ΩúÊàê
 */
export const postTagsApi = (
    createTag: CreateTag, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostTagsApi201>> => {
    
    
    return axios.post(
      `/api/tags`,
      createTag,options
    );
  }



export const getPostTagsApiMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTagsApi>>, TError,{data: CreateTag}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postTagsApi>>, TError,{data: CreateTag}, TContext> => {

const mutationKey = ['postTagsApi'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTagsApi>>, {data: CreateTag}> = (props) => {
          const {data} = props ?? {};

          return  postTagsApi(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTagsApiMutationResult = NonNullable<Awaited<ReturnType<typeof postTagsApi>>>
    export type PostTagsApiMutationBody = CreateTag
    export type PostTagsApiMutationError = AxiosError<ErrorResponse>

    /**
 * @summary Êñ∞Ë¶è„Çø„Ç∞„Çí‰ΩúÊàê
 */
export const usePostTagsApi = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTagsApi>>, TError,{data: CreateTag}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postTagsApi>>,
        TError,
        {data: CreateTag},
        TContext
      > => {

      const mutationOptions = getPostTagsApiMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆ„Çø„Ç∞ÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åæ„Åô
 * @summary ÁâπÂÆö„ÅÆ„Çø„Ç∞„ÇíÂèñÂæó
 */
export const getTagsByIdApi = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetTagsByIdApi200>> => {
    
    
    return axios.get(
      `/api/tags/${id}`,options
    );
  }


export const getGetTagsByIdApiQueryKey = (id: string,) => {
    return [`/api/tags/${id}`] as const;
    }

    
export const getGetTagsByIdApiQueryOptions = <TData = Awaited<ReturnType<typeof getTagsByIdApi>>, TError = AxiosError<ErrorResponse>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTagsByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTagsByIdApiQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTagsByIdApi>>> = ({ signal }) => getTagsByIdApi(id, { ...(signal ? { signal } : {}), ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTagsByIdApi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTagsByIdApiQueryResult = NonNullable<Awaited<ReturnType<typeof getTagsByIdApi>>>
export type GetTagsByIdApiQueryError = AxiosError<ErrorResponse>


export function useGetTagsByIdApi<TData = Awaited<ReturnType<typeof getTagsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTagsByIdApi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTagsByIdApi>>,
          TError,
          Awaited<ReturnType<typeof getTagsByIdApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTagsByIdApi<TData = Awaited<ReturnType<typeof getTagsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTagsByIdApi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTagsByIdApi>>,
          TError,
          Awaited<ReturnType<typeof getTagsByIdApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTagsByIdApi<TData = Awaited<ReturnType<typeof getTagsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTagsByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÁâπÂÆö„ÅÆ„Çø„Ç∞„ÇíÂèñÂæó
 */

export function useGetTagsByIdApi<TData = Awaited<ReturnType<typeof getTagsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTagsByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTagsByIdApiQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆ„Çø„Ç∞„ÇíÂâäÈô§„Åó„Åæ„Åô
 * @summary „Çø„Ç∞„ÇíÂâäÈô§
 */
export const deleteTagsByIdApi = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/api/tags/${id}`,options
    );
  }



export const getDeleteTagsByIdApiMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTagsByIdApi>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTagsByIdApi>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteTagsByIdApi'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTagsByIdApi>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteTagsByIdApi(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTagsByIdApiMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTagsByIdApi>>>
    
    export type DeleteTagsByIdApiMutationError = AxiosError<ErrorResponse>

    /**
 * @summary „Çø„Ç∞„ÇíÂâäÈô§
 */
export const useDeleteTagsByIdApi = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTagsByIdApi>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteTagsByIdApi>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteTagsByIdApiMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÊåáÂÆö„Åï„Çå„ÅüÊäïÁ®øID„Å´Èñ¢ÈÄ£„Åô„Çã„Åô„Åπ„Å¶„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÂèñÂæó„Åó„Åæ„Åô
 * @summary ÁâπÂÆö„ÅÆÊäïÁ®ø„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÂèñÂæó
 */
export const getCommentsApi = (
    params: GetCommentsApiParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCommentsApi200>> => {
    
    
    return axios.get(
      `/api/comments`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCommentsApiQueryKey = (params: GetCommentsApiParams,) => {
    return [`/api/comments`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCommentsApiQueryOptions = <TData = Awaited<ReturnType<typeof getCommentsApi>>, TError = AxiosError<ErrorResponse>>(params: GetCommentsApiParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsApi>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommentsApiQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommentsApi>>> = ({ signal }) => getCommentsApi(params, { ...(signal ? { signal } : {}), ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommentsApi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommentsApiQueryResult = NonNullable<Awaited<ReturnType<typeof getCommentsApi>>>
export type GetCommentsApiQueryError = AxiosError<ErrorResponse>


export function useGetCommentsApi<TData = Awaited<ReturnType<typeof getCommentsApi>>, TError = AxiosError<ErrorResponse>>(
 params: GetCommentsApiParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsApi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsApi>>,
          TError,
          Awaited<ReturnType<typeof getCommentsApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommentsApi<TData = Awaited<ReturnType<typeof getCommentsApi>>, TError = AxiosError<ErrorResponse>>(
 params: GetCommentsApiParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsApi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsApi>>,
          TError,
          Awaited<ReturnType<typeof getCommentsApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommentsApi<TData = Awaited<ReturnType<typeof getCommentsApi>>, TError = AxiosError<ErrorResponse>>(
 params: GetCommentsApiParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÁâπÂÆö„ÅÆÊäïÁ®ø„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÂèñÂæó
 */

export function useGetCommentsApi<TData = Awaited<ReturnType<typeof getCommentsApi>>, TError = AxiosError<ErrorResponse>>(
 params: GetCommentsApiParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCommentsApiQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Êñ∞„Åó„ÅÑ„Ç≥„É°„É≥„Éà„Çí„Ç∑„Çπ„ÉÜ„É†„Å´ÁôªÈå≤„Åó„Åæ„Åô
 * @summary Êñ∞Ë¶è„Ç≥„É°„É≥„Éà„Çí‰ΩúÊàê
 */
export const postCommentsApi = (
    createComment: CreateComment, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostCommentsApi201>> => {
    
    
    return axios.post(
      `/api/comments`,
      createComment,options
    );
  }



export const getPostCommentsApiMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCommentsApi>>, TError,{data: CreateComment}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postCommentsApi>>, TError,{data: CreateComment}, TContext> => {

const mutationKey = ['postCommentsApi'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCommentsApi>>, {data: CreateComment}> = (props) => {
          const {data} = props ?? {};

          return  postCommentsApi(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCommentsApiMutationResult = NonNullable<Awaited<ReturnType<typeof postCommentsApi>>>
    export type PostCommentsApiMutationBody = CreateComment
    export type PostCommentsApiMutationError = AxiosError<ErrorResponse>

    /**
 * @summary Êñ∞Ë¶è„Ç≥„É°„É≥„Éà„Çí‰ΩúÊàê
 */
export const usePostCommentsApi = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCommentsApi>>, TError,{data: CreateComment}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postCommentsApi>>,
        TError,
        {data: CreateComment},
        TContext
      > => {

      const mutationOptions = getPostCommentsApiMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆ„Ç≥„É°„É≥„ÉàÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åæ„Åô
 * @summary ÁâπÂÆö„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÂèñÂæó
 */
export const getCommentsByIdApi = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCommentsByIdApi200>> => {
    
    
    return axios.get(
      `/api/comments/${id}`,options
    );
  }


export const getGetCommentsByIdApiQueryKey = (id: string,) => {
    return [`/api/comments/${id}`] as const;
    }

    
export const getGetCommentsByIdApiQueryOptions = <TData = Awaited<ReturnType<typeof getCommentsByIdApi>>, TError = AxiosError<ErrorResponse>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommentsByIdApiQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommentsByIdApi>>> = ({ signal }) => getCommentsByIdApi(id, { ...(signal ? { signal } : {}), ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommentsByIdApi>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCommentsByIdApiQueryResult = NonNullable<Awaited<ReturnType<typeof getCommentsByIdApi>>>
export type GetCommentsByIdApiQueryError = AxiosError<ErrorResponse>


export function useGetCommentsByIdApi<TData = Awaited<ReturnType<typeof getCommentsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsByIdApi>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsByIdApi>>,
          TError,
          Awaited<ReturnType<typeof getCommentsByIdApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommentsByIdApi<TData = Awaited<ReturnType<typeof getCommentsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsByIdApi>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsByIdApi>>,
          TError,
          Awaited<ReturnType<typeof getCommentsByIdApi>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCommentsByIdApi<TData = Awaited<ReturnType<typeof getCommentsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÁâπÂÆö„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÂèñÂæó
 */

export function useGetCommentsByIdApi<TData = Awaited<ReturnType<typeof getCommentsByIdApi>>, TError = AxiosError<ErrorResponse>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommentsByIdApi>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCommentsByIdApiQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô
 * @summary „Ç≥„É°„É≥„Éà„ÇíÊõ¥Êñ∞
 */
export const putCommentsByIdApi = (
    id: string,
    updateComment: UpdateComment, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutCommentsByIdApi200>> => {
    
    
    return axios.put(
      `/api/comments/${id}`,
      updateComment,options
    );
  }



export const getPutCommentsByIdApiMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCommentsByIdApi>>, TError,{id: string;data: UpdateComment}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putCommentsByIdApi>>, TError,{id: string;data: UpdateComment}, TContext> => {

const mutationKey = ['putCommentsByIdApi'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCommentsByIdApi>>, {id: string;data: UpdateComment}> = (props) => {
          const {id,data} = props ?? {};

          return  putCommentsByIdApi(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutCommentsByIdApiMutationResult = NonNullable<Awaited<ReturnType<typeof putCommentsByIdApi>>>
    export type PutCommentsByIdApiMutationBody = UpdateComment
    export type PutCommentsByIdApiMutationError = AxiosError<ErrorResponse>

    /**
 * @summary „Ç≥„É°„É≥„Éà„ÇíÊõ¥Êñ∞
 */
export const usePutCommentsByIdApi = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCommentsByIdApi>>, TError,{id: string;data: UpdateComment}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putCommentsByIdApi>>,
        TError,
        {id: string;data: UpdateComment},
        TContext
      > => {

      const mutationOptions = getPutCommentsByIdApiMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô
 * @summary „Ç≥„É°„É≥„Éà„ÇíÂâäÈô§
 */
export const deleteCommentsByIdApi = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/api/comments/${id}`,options
    );
  }



export const getDeleteCommentsByIdApiMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCommentsByIdApi>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCommentsByIdApi>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteCommentsByIdApi'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCommentsByIdApi>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteCommentsByIdApi(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCommentsByIdApiMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCommentsByIdApi>>>
    
    export type DeleteCommentsByIdApiMutationError = AxiosError<ErrorResponse>

    /**
 * @summary „Ç≥„É°„É≥„Éà„ÇíÂâäÈô§
 */
export const useDeleteCommentsByIdApi = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCommentsByIdApi>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCommentsByIdApi>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteCommentsByIdApiMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
