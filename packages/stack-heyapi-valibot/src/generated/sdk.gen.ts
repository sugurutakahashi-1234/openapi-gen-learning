// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetUsersApiData, GetUsersApiResponses, GetUsersApiErrors, PostUsersApiData, PostUsersApiResponses, PostUsersApiErrors, DeleteUsersByIdApiData, DeleteUsersByIdApiResponses, DeleteUsersByIdApiErrors, GetUsersByIdApiData, GetUsersByIdApiResponses, GetUsersByIdApiErrors, GetPostsApiData, GetPostsApiResponses, GetPostsApiErrors, PostPostsApiData, PostPostsApiResponses, PostPostsApiErrors, DeletePostsByIdApiData, DeletePostsByIdApiResponses, DeletePostsByIdApiErrors, GetPostsByIdApiData, GetPostsByIdApiResponses, GetPostsByIdApiErrors, PutPostsByIdApiData, PutPostsByIdApiResponses, PutPostsByIdApiErrors, GetTagsApiData, GetTagsApiResponses, GetTagsApiErrors, PostTagsApiData, PostTagsApiResponses, PostTagsApiErrors, DeleteTagsByIdApiData, DeleteTagsByIdApiResponses, DeleteTagsByIdApiErrors, GetTagsByIdApiData, GetTagsByIdApiResponses, GetTagsByIdApiErrors, GetCommentsApiData, GetCommentsApiResponses, GetCommentsApiErrors, PostCommentsApiData, PostCommentsApiResponses, PostCommentsApiErrors, DeleteCommentsByIdApiData, DeleteCommentsByIdApiResponses, DeleteCommentsByIdApiErrors, GetCommentsByIdApiData, GetCommentsByIdApiResponses, GetCommentsByIdApiErrors, PutCommentsByIdApiData, PutCommentsByIdApiResponses, PutCommentsByIdApiErrors } from './types.gen';
import { vGetUsersApiResponse, vPostUsersApiResponse, vDeleteUsersByIdApiResponse, vGetUsersByIdApiResponse, vGetPostsApiResponse, vPostPostsApiResponse, vDeletePostsByIdApiResponse, vGetPostsByIdApiResponse, vPutPostsByIdApiResponse, vGetTagsApiResponse, vPostTagsApiResponse, vDeleteTagsByIdApiResponse, vGetTagsByIdApiResponse, vGetCommentsApiResponse, vPostCommentsApiResponse, vDeleteCommentsByIdApiResponse, vGetCommentsByIdApiResponse, vPutCommentsByIdApiResponse } from './valibot.gen';
import * as v from 'valibot';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * 全ユーザーを取得
 * システムに登録されているすべてのユーザーを取得します
 */
export const getUsersApi = <ThrowOnError extends boolean = true>(options?: Options<GetUsersApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersApiResponses, GetUsersApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vGetUsersApiResponse, data);
        },
        url: '/api/users',
        ...options
    });
};

/**
 * 新規ユーザーを作成
 * 新しいユーザーをシステムに登録します
 */
export const postUsersApi = <ThrowOnError extends boolean = true>(options: Options<PostUsersApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersApiResponses, PostUsersApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vPostUsersApiResponse, data);
        },
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ユーザーを削除
 * 指定されたIDのユーザーを削除します
 */
export const deleteUsersByIdApi = <ThrowOnError extends boolean = true>(options: Options<DeleteUsersByIdApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUsersByIdApiResponses, DeleteUsersByIdApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vDeleteUsersByIdApiResponse, data);
        },
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * 特定のユーザーを取得
 * 指定されたIDのユーザー情報を取得します
 */
export const getUsersByIdApi = <ThrowOnError extends boolean = true>(options: Options<GetUsersByIdApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdApiResponses, GetUsersByIdApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vGetUsersByIdApiResponse, data);
        },
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * 全投稿を取得
 * システムに登録されているすべての投稿を取得します。公開状態でフィルタ可能
 */
export const getPostsApi = <ThrowOnError extends boolean = true>(options?: Options<GetPostsApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPostsApiResponses, GetPostsApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vGetPostsApiResponse, data);
        },
        url: '/api/posts',
        ...options
    });
};

/**
 * 新規投稿を作成
 * 新しい投稿をシステムに登録します
 */
export const postPostsApi = <ThrowOnError extends boolean = true>(options: Options<PostPostsApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPostsApiResponses, PostPostsApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vPostPostsApiResponse, data);
        },
        url: '/api/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 投稿を削除
 * 指定されたIDの投稿を削除します
 */
export const deletePostsByIdApi = <ThrowOnError extends boolean = true>(options: Options<DeletePostsByIdApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePostsByIdApiResponses, DeletePostsByIdApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vDeletePostsByIdApiResponse, data);
        },
        url: '/api/posts/{id}',
        ...options
    });
};

/**
 * 特定の投稿を取得
 * 指定されたIDの投稿情報を取得します
 */
export const getPostsByIdApi = <ThrowOnError extends boolean = true>(options: Options<GetPostsByIdApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPostsByIdApiResponses, GetPostsByIdApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vGetPostsByIdApiResponse, data);
        },
        url: '/api/posts/{id}',
        ...options
    });
};

/**
 * 投稿を更新
 * 指定されたIDの投稿を更新します
 */
export const putPostsByIdApi = <ThrowOnError extends boolean = true>(options: Options<PutPostsByIdApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutPostsByIdApiResponses, PutPostsByIdApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vPutPostsByIdApiResponse, data);
        },
        url: '/api/posts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 全タグを取得
 * システムに登録されているすべてのタグを取得します
 */
export const getTagsApi = <ThrowOnError extends boolean = true>(options?: Options<GetTagsApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagsApiResponses, GetTagsApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vGetTagsApiResponse, data);
        },
        url: '/api/tags',
        ...options
    });
};

/**
 * 新規タグを作成
 * 新しいタグをシステムに登録します
 */
export const postTagsApi = <ThrowOnError extends boolean = true>(options: Options<PostTagsApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTagsApiResponses, PostTagsApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vPostTagsApiResponse, data);
        },
        url: '/api/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * タグを削除
 * 指定されたIDのタグを削除します
 */
export const deleteTagsByIdApi = <ThrowOnError extends boolean = true>(options: Options<DeleteTagsByIdApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagsByIdApiResponses, DeleteTagsByIdApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vDeleteTagsByIdApiResponse, data);
        },
        url: '/api/tags/{id}',
        ...options
    });
};

/**
 * 特定のタグを取得
 * 指定されたIDのタグ情報を取得します
 */
export const getTagsByIdApi = <ThrowOnError extends boolean = true>(options: Options<GetTagsByIdApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagsByIdApiResponses, GetTagsByIdApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vGetTagsByIdApiResponse, data);
        },
        url: '/api/tags/{id}',
        ...options
    });
};

/**
 * 特定の投稿のコメントを取得
 * 指定された投稿IDに関連するすべてのコメントを取得します
 */
export const getCommentsApi = <ThrowOnError extends boolean = true>(options: Options<GetCommentsApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentsApiResponses, GetCommentsApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vGetCommentsApiResponse, data);
        },
        url: '/api/comments',
        ...options
    });
};

/**
 * 新規コメントを作成
 * 新しいコメントをシステムに登録します
 */
export const postCommentsApi = <ThrowOnError extends boolean = true>(options: Options<PostCommentsApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCommentsApiResponses, PostCommentsApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vPostCommentsApiResponse, data);
        },
        url: '/api/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * コメントを削除
 * 指定されたIDのコメントを削除します
 */
export const deleteCommentsByIdApi = <ThrowOnError extends boolean = true>(options: Options<DeleteCommentsByIdApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCommentsByIdApiResponses, DeleteCommentsByIdApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vDeleteCommentsByIdApiResponse, data);
        },
        url: '/api/comments/{id}',
        ...options
    });
};

/**
 * 特定のコメントを取得
 * 指定されたIDのコメント情報を取得します
 */
export const getCommentsByIdApi = <ThrowOnError extends boolean = true>(options: Options<GetCommentsByIdApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentsByIdApiResponses, GetCommentsByIdApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vGetCommentsByIdApiResponse, data);
        },
        url: '/api/comments/{id}',
        ...options
    });
};

/**
 * コメントを更新
 * 指定されたIDのコメントを更新します
 */
export const putCommentsByIdApi = <ThrowOnError extends boolean = true>(options: Options<PutCommentsByIdApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutCommentsByIdApiResponses, PutCommentsByIdApiErrors, ThrowOnError>({
        responseValidator: async (data) => {
            return await v.parseAsync(vPutCommentsByIdApiResponse, data);
        },
        url: '/api/comments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};