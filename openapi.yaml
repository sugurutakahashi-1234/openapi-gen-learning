openapi: 3.1.0
servers:
  - url: https://api.example.com
    description: Production server
  - url: https://api-stg.example.com
    description: Staging server
  - url: https://api-dev.example.com
    description: Development server
  - url: http://localhost:3000
    description: Test server
  - url: http://localhost:3000
    description: Local development server
  - url: http://localhost:4010
    description: Prism mock server (for local development)
info:
  title: MyApp API
  version: 1.0.0
  description: ユーザー管理API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: cuid
          description: 一意識別子（CUID形式）
          example: clh1234567890abcdef
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: 名前
          example: 山田太郎
        email:
          type: string
          format: email
          description: メールアドレス
          example: user@example.com
        createdAt:
          type: string
          format: date-time
          description: 作成日時
          example: 2024-01-01T09:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          description: 更新日時
          example: 2024-01-02T10:30:00.000Z
      required:
        - id
        - name
        - email
        - createdAt
        - updatedAt
      description: ユーザー情報
    ApiErrorType:
      type: string
      enum:
        - BadRequest
        - ValidationFailed
        - InvalidJson
        - InvalidAgeRange
        - Unauthorized
        - Forbidden
        - NotFound
        - UserNotFound
        - PostNotFound
        - CommentNotFound
        - TagNotFound
        - Conflict
        - EmailAlreadyExists
        - TagAlreadyExists
        - Unknown
        - DatabaseError
        - InternalServerError
      description: エラータイプ
      example: ValidationFailed
    ErrorResponse:
      type: object
      properties:
        data:
          type: "null"
          description: エラー時は常にnull
        status:
          type: string
          enum:
            - error
          description: エラーステータス
        errorType:
          $ref: "#/components/schemas/ApiErrorType"
        message:
          type: string
          description: エラーメッセージ（ユーザー向け）
          example: バリデーションに失敗しました
        description:
          type: string
          description: エラーの詳細説明（開発者向け）
          example: User with id 'abc123' not found in database
      required:
        - data
        - status
        - errorType
        - message
        - description
      description: APIエラーレスポンス
    CreateUser:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: 名前
          example: 山田太郎
        email:
          type: string
          format: email
          description: メールアドレス
          example: user@example.com
      required:
        - name
        - email
      description: ユーザー作成リクエスト
    Tag:
      type: object
      properties:
        id:
          type: string
          format: cuid
          description: 一意識別子（CUID形式）
          example: clh1234567890abcdef
        name:
          type: string
          minLength: 1
          maxLength: 50
          description: タグ名
          example: TypeScript
        slug:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          description: URLスラッグ
          example: typescript
        createdAt:
          type: string
          format: date-time
          description: 作成日時
          example: 2024-01-01T09:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          description: 更新日時
          example: 2024-01-02T10:30:00.000Z
      required:
        - id
        - name
        - slug
        - createdAt
        - updatedAt
      description: タグ情報
    PostTag:
      type: object
      properties:
        postId:
          type: string
          format: cuid
          description: 投稿ID
          example: clh1234567890abcdef
        tagId:
          type: string
          format: cuid
          description: タグID
          example: clh0987654321fedcba
        tag:
          $ref: "#/components/schemas/Tag"
        taggedAt:
          type: string
          format: date-time
          description: タグ付け日時
          example: 2024-01-01T09:00:00.000Z
      required:
        - postId
        - tagId
        - tag
        - taggedAt
      description: 投稿とタグの関連情報
    Post:
      type: object
      properties:
        id:
          type: string
          format: cuid
          description: 一意識別子（CUID形式）
          example: clh1234567890abcdef
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: タイトル
          example: TypeScriptの型システムについて
        content:
          type: string
          description: 本文
          example: TypeScriptの型システムは...
        published:
          type: boolean
          description: 公開状態（必ずtrue/false）
          example: true
        userId:
          type: string
          format: cuid
          description: 投稿者ID
          example: clh0987654321fedcba
        tags:
          type: array
          items:
            $ref: "#/components/schemas/PostTag"
          description: タグ一覧（空配列の可能性あり）
        createdAt:
          type: string
          format: date-time
          description: 作成日時
          example: 2024-01-01T09:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          description: 更新日時
          example: 2024-01-02T10:30:00.000Z
      required:
        - id
        - title
        - content
        - published
        - userId
        - tags
        - createdAt
        - updatedAt
      description: 投稿情報
    CreatePost:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: タイトル（必須）
          example: TypeScriptの型システムについて
        content:
          type: string
          minLength: 1
          description: 本文（必須）
          example: TypeScriptの型システムは...
        published:
          type: boolean
          default: false
          description: "公開状態（省略時: false）"
          example: true
        userId:
          type: string
          format: cuid
          description: 投稿者ID（必須）
          example: clh0987654321fedcba
        tagIds:
          type: array
          items:
            type: string
            format: cuid
          description: "タグIDの配列（省略時: タグなし）"
          example:
            - clhtag123456789abc
            - clhtag987654321xyz
      required:
        - title
        - content
        - userId
      description: 投稿作成リクエスト
    UpdatePost:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: タイトル（更新する場合のみ指定）
          example: 更新後のタイトル
        content:
          type: string
          minLength: 1
          description: 本文（更新する場合のみ指定）
          example: 更新後の本文...
        published:
          type: boolean
          description: 公開状態（更新する場合のみ指定）
          example: true
        tagIds:
          type: array
          items:
            type: string
            format: cuid
          description: "タグIDの配列 - 省略時: 変更なし、空配列: すべて削除、配列指定: 完全置換"
          example:
            - clhtag123456789abc
            - clhtag987654321xyz
      description: 投稿更新リクエスト（PATCH）
    CreateTag:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          description: タグ名
          example: TypeScript
        slug:
          type: string
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          description: URLスラッグ
          example: typescript
      required:
        - name
        - slug
      description: タグ作成リクエスト
    Comment:
      type: object
      properties:
        id:
          type: string
          format: cuid
          description: 一意識別子（CUID形式）
          example: clh1234567890abcdef
        content:
          type: string
          minLength: 1
          description: コメント内容
          example: 素晴らしい記事ですね！
        postId:
          type: string
          format: cuid
          description: 投稿ID
          example: clh5678901234abcdef
        user:
          type: object
          properties:
            id:
              type: string
              format: cuid
              description: 一意識別子（CUID形式）
              example: clh1234567890abcdef
            name:
              type: string
              minLength: 1
              maxLength: 100
              description: 名前
              example: 山田太郎
            email:
              type: string
              format: email
              description: メールアドレス
              example: user@example.com
          required:
            - id
            - name
            - email
          description: ユーザー情報
        createdAt:
          type: string
          format: date-time
          description: 作成日時
          example: 2024-01-01T09:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          description: 更新日時
          example: 2024-01-02T10:30:00.000Z
      required:
        - id
        - content
        - postId
        - user
        - createdAt
        - updatedAt
      description: コメント情報
    CreateComment:
      type: object
      properties:
        content:
          type: string
          minLength: 1
          description: コメント内容
          example: 素晴らしい記事ですね！
        postId:
          type: string
          format: cuid
          description: 投稿ID
          example: clh1234567890abcdef
        userId:
          type: string
          format: cuid
          description: ユーザーID
          example: clh0987654321fedcba
      required:
        - content
        - postId
        - userId
      description: コメント作成リクエスト
    UpdateComment:
      type: object
      properties:
        content:
          type: string
          minLength: 1
          description: コメント内容
          example: 更新後のコメント内容
      required:
        - content
      description: コメント更新リクエスト
  parameters: {}
paths:
  /api/users:
    get:
      operationId: getUsersApi
      summary: 全ユーザーを取得
      description: システムに登録されているすべてのユーザーを取得します
      security: []
      responses:
        "200":
          description: ユーザー一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      operationId: postUsersApi
      summary: 新規ユーザーを作成
      description: 新しいユーザーをシステムに登録します
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: 作成されたユーザー
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/users/{id}:
    get:
      operationId: getUsersByIdApi
      summary: 特定のユーザーを取得
      description: 指定されたIDのユーザー情報を取得します
      security: []
      parameters:
        - schema:
            type: string
            format: cuid
          required: true
          description: 一意識別子（CUID形式）
          name: id
          in: path
          example: clh1234567890abcdef
      responses:
        "200":
          description: ユーザー情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      operationId: deleteUsersByIdApi
      summary: ユーザーを削除
      description: 指定されたIDのユーザーを削除します
      security: []
      parameters:
        - schema:
            type: string
            format: cuid
          required: true
          description: 一意識別子（CUID形式）
          name: id
          in: path
          example: clh1234567890abcdef
      responses:
        "204":
          description: 削除成功
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/posts:
    get:
      operationId: getPostsApi
      summary: 全投稿を取得
      description: システムに登録されているすべての投稿を取得します。公開状態でフィルタ可能
      security: []
      parameters:
        - schema:
            type: string
            default: "1"
          required: false
          description: ページ番号（1から開始）
          name: page
          in: query
          example: "1"
        - schema:
            type: string
            default: "10"
          required: false
          description: 1ページあたりの件数（最大100）
          name: limit
          in: query
          example: "10"
        - schema:
            type: string
            format: cuid
          required: false
          description: ユーザーIDでフィルタリング
          name: userId
          in: query
          example: clh0987654321fedcba
        - schema:
            type: string
          required: false
          description: 公開状態でフィルタリング
          name: published
          in: query
          example: "true"
      responses:
        "200":
          description: 投稿一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      operationId: postPostsApi
      summary: 新規投稿を作成
      description: 新しい投稿をシステムに登録します
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePost"
      responses:
        "201":
          description: 作成された投稿
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/posts/{id}:
    get:
      operationId: getPostsByIdApi
      summary: 特定の投稿を取得
      description: 指定されたIDの投稿情報を取得します
      security: []
      parameters:
        - schema:
            type: string
            format: cuid
          required: true
          description: 一意識別子（CUID形式）
          name: id
          in: path
          example: clh1234567890abcdef
      responses:
        "200":
          description: 投稿情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      operationId: putPostsByIdApi
      summary: 投稿を更新
      description: 指定されたIDの投稿を更新します
      security: []
      parameters:
        - schema:
            type: string
            format: cuid
          required: true
          description: 一意識別子（CUID形式）
          name: id
          in: path
          example: clh1234567890abcdef
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePost"
      responses:
        "200":
          description: 更新された投稿
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Post"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      operationId: deletePostsByIdApi
      summary: 投稿を削除
      description: 指定されたIDの投稿を削除します
      security: []
      parameters:
        - schema:
            type: string
            format: cuid
          required: true
          description: 一意識別子（CUID形式）
          name: id
          in: path
          example: clh1234567890abcdef
      responses:
        "204":
          description: 削除成功
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/tags:
    get:
      operationId: getTagsApi
      summary: 全タグを取得
      description: システムに登録されているすべてのタグを取得します
      security: []
      responses:
        "200":
          description: タグ一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tag"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      operationId: postTagsApi
      summary: 新規タグを作成
      description: 新しいタグをシステムに登録します
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTag"
      responses:
        "201":
          description: 作成されたタグ
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Tag"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/tags/{id}:
    get:
      operationId: getTagsByIdApi
      summary: 特定のタグを取得
      description: 指定されたIDのタグ情報を取得します
      security: []
      parameters:
        - schema:
            type: string
            format: cuid
          required: true
          description: 一意識別子（CUID形式）
          name: id
          in: path
          example: clh1234567890abcdef
      responses:
        "200":
          description: タグ情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Tag"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      operationId: deleteTagsByIdApi
      summary: タグを削除
      description: 指定されたIDのタグを削除します
      security: []
      parameters:
        - schema:
            type: string
            format: cuid
          required: true
          description: 一意識別子（CUID形式）
          name: id
          in: path
          example: clh1234567890abcdef
      responses:
        "204":
          description: 削除成功
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/comments:
    get:
      operationId: getCommentsApi
      summary: 特定の投稿のコメントを取得
      description: 指定された投稿IDに関連するすべてのコメントを取得します
      security: []
      parameters:
        - schema:
            type: string
            format: cuid
          required: true
          description: 投稿ID
          name: postId
          in: query
          example: clh1234567890abcdef
      responses:
        "200":
          description: コメント一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      operationId: postCommentsApi
      summary: 新規コメントを作成
      description: 新しいコメントをシステムに登録します
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateComment"
      responses:
        "201":
          description: 作成されたコメント
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Comment"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/comments/{id}:
    get:
      operationId: getCommentsByIdApi
      summary: 特定のコメントを取得
      description: 指定されたIDのコメント情報を取得します
      security: []
      parameters:
        - schema:
            type: string
            format: cuid
          required: true
          description: 一意識別子（CUID形式）
          name: id
          in: path
          example: clh1234567890abcdef
      responses:
        "200":
          description: コメント情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Comment"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      operationId: putCommentsByIdApi
      summary: コメントを更新
      description: 指定されたIDのコメントを更新します
      security: []
      parameters:
        - schema:
            type: string
            format: cuid
          required: true
          description: 一意識別子（CUID形式）
          name: id
          in: path
          example: clh1234567890abcdef
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateComment"
      responses:
        "200":
          description: 更新されたコメント
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Comment"
                  status:
                    type: string
                    enum:
                      - success
                    description: 成功ステータス
                required:
                  - data
                  - status
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      operationId: deleteCommentsByIdApi
      summary: コメントを削除
      description: 指定されたIDのコメントを削除します
      security: []
      parameters:
        - schema:
            type: string
            format: cuid
          required: true
          description: 一意識別子（CUID形式）
          name: id
          in: path
          example: clh1234567890abcdef
      responses:
        "204":
          description: 削除成功
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
webhooks: {}
